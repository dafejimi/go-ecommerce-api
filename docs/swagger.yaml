swagger: "2.0"
info:
  title: "E-Commerce API"
  description: "API documentation for the E-commerce platform"
  version: "1.0.0"
  contact:
    name: "Joshua Olujimi"
    email: "jimijay.oj@gmail.com"
paths:
  /users:
    post:
      summary: "Register a new user"
      description: "This endpoint allows you to register a new user in the system"
      tags:
        - "users"
      parameters:
        - name: "user"
          in: "body"
          description: "User registration data"
          required: true
          schema:
            $ref: "#/definitions/models.User"
      responses:
        "200":
          description: "User registered successfully"
        "400":
          description: "Invalid input"
        "500":
          description: "Internal server error"
  /users/login:
    post:
      summary: "Login user"
      description: "This endpoint allows users to login and receive a JWT token"
      tags:
        - "users"
      parameters:
        - name: "loginInput"
          in: "body"
          description: "Login credentials"
          required: true
          schema:
            $ref: "#/definitions/models.LoginInput"
      responses:
        "200":
          description: "Login successful"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"
  /products:
    post:
      summary: "Create a new product"
      description: "This endpoint allows an admin to create a new product"
      tags:
        - "products"
      parameters:
        - name: "product"
          in: "body"
          description: "Product details"
          required: true
          schema:
            $ref: "#/definitions/models.Product"
      responses:
        "200":
          description: "Product created successfully"
        "400":
          description: "Invalid input"
        "500":
          description: "Internal server error"
    get:
      summary: "Get all products"
      description: "Fetch a list of all products"
      tags:
        - "products"
      responses:
        "200":
          description: "List of products"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Product"
        "500":
          description: "Internal server error"
  /products/{id}:
    get:
      summary: "Get a product by ID"
      description: "Fetch a product's details by its ID"
      tags:
        - "products"
      parameters:
        - name: "id"
          in: "path"
          description: "Product ID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Product found"
          schema:
            $ref: "#/definitions/models.Product"
        "404":
          description: "Product not found"
        "500":
          description: "Internal server error"
    put:
      summary: "Update product details"
      description: "Update details of an existing product"
      tags:
        - "products"
      parameters:
        - name: "id"
          in: "path"
          description: "Product ID"
          required: true
          type: "integer"
          format: "int64"
        - name: "product"
          in: "body"
          description: "Updated product data"
          required: true
          schema:
            $ref: "#/definitions/models.Product"
      responses:
        "200":
          description: "Product updated successfully"
        "400":
          description: "Invalid input"
        "500":
          description: "Internal server error"
    delete:
      summary: "Delete a product"
      description: "Delete a product by its ID"
      tags:
        - "products"
      parameters:
        - name: "id"
          in: "path"
          description: "Product ID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Product deleted successfully"
        "400":
          description: "Invalid input"
        "500":
          description: "Internal server error"
  /orders:
    post:
      summary: "Create a new order"
      description: "This endpoint allows users to place a new order"
      tags:
        - "orders"
      parameters:
        - name: "order"
          in: "body"
          description: "Order details"
          required: true
          schema:
            $ref: "#/definitions/models.Order"
      responses:
        "200":
          description: "Order placed successfully"
        "400":
          description: "Invalid request"
        "500":
          description: "Internal server error"
  /orders/{id}:
    get:
      summary: "Get an order by ID"
      description: "Fetch details of a specific order"
      tags:
        - "orders"
      parameters:
        - name: "id"
          in: "path"
          description: "Order ID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Order found"
          schema:
            $ref: "#/definitions/models.Order"
        "404":
          description: "Order not found"
        "500":
          description: "Internal server error"
definitions:
  models.User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      email:
        type: "string"
      password:
        type: "string"
      is_admin:
        type: "boolean"
  models.LoginInput:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  models.Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      price:
        type: "number"
        format: "float"
      stock_quantity:
        type: "integer"
  models.Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
      total_price:
        type: "number"
        format: "float"
